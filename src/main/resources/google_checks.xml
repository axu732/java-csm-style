<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
  <property name="charset" value="UTF-8" />
  <property name="severity" value="warning" />
  <property name="fileExtensions" value="java, properties, xml" />

  <module name="LineLength">
    <property name="fileExtensions" value="java" />
    <property name="max" value="100" />
  </module>

  <module name="TreeWalker">
    <module name="OuterTypeFilename" />
    <module name="OneTopLevelClass" />
    <module name="EmptyBlock">
      <property name="option" value="TEXT" />
      <property name="tokens"
        value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
    </module>
    <module name="NeedBraces">
      <property name="tokens"
        value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE" />
    </module>
    <module name="LeftCurly">
      <property name="tokens"
        value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT" />
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlySame" />
      <property name="tokens"
        value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO" />
    </module>
    <module name="WhitespaceAfter">
      <property name="tokens"
        value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, DO_WHILE" />
    </module>
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true" />
      <property name="allowEmptyMethods" value="true" />
      <property name="allowEmptyTypes" value="true" />
      <property name="allowEmptyLoops" value="true" />
      <property name="tokens"
        value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                    BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAND,
                    LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                    LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                    NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                    SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
    </module>
    <module name="OneStatementPerLine" />
    <module name="MultipleVariableDeclarations" />
    <module name="ArrayTypeStyle" />
    <module name="MissingSwitchDefault" />
    <module name="FallThrough" />
    <module name="UpperEll" />
    <module name="ModifierOrder" />
    <module name="EmptyLineSeparator">
      <property name="tokens"
        value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                    STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
      <property name="allowNoEmptyLineBetweenFields" value="true" />
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
      <message key="name.invalidPattern"
        value="Package name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="TypeName">
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF" />
      <message key="name.invalidPattern"
        value="Type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MemberName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />
      <message key="name.invalidPattern"
        value="Member name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
      <message key="name.invalidPattern"
        value="Parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
      <message key="name.invalidPattern"
        value="Local variable name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern"
        value="Class type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern"
        value="Method type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern"
        value="Interface type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="NoFinalizer" />
    <module name="GenericWhitespace">
      <message key="ws.followed"
        value="GenericWhitespace ''{0}'' is followed by whitespace." />
      <message key="ws.preceded"
        value="GenericWhitespace ''{0}'' is preceded with whitespace." />
      <message key="ws.illegalFollow"
        value="GenericWhitespace ''{0}'' should followed by whitespace." />
      <message key="ws.notPreceded"
        value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
    </module>
    <module name="Indentation">
      <property name="basicOffset" value="2" />
      <property name="braceAdjustment" value="0" />
      <property name="caseIndent" value="2" />
      <property name="throwsIndent" value="4" />
      <property name="lineWrappingIndentation" value="4" />
      <property name="arrayInitIndent" value="2" />
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
      <message key="name.invalidPattern"
        value="Method name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="AvoidStarImport" />
    <module name="UnusedImports" />
    <module name="RedundantImport" />
    <module name="RedundantModifier" />
    <module name="UnnecessaryParentheses" />
    <module name="SimplifyBooleanExpression" />
    <module name="SimplifyBooleanReturn" />
    <module name="EmptyStatement" />
    <module name="ConstantName" />
    <module name="StaticVariableName" />
    <module name="VisibilityModifier" />
    <module name="FinalClass" />
    <module name="MissingJavadocMethod">
      <property name="scope" value="public" />
      <property name="minLineCount" value="2" />
      <property name="allowedAnnotations" value="Override, Test" />
      <property name="tokens" value="METHOD_DEF, CTOR_DEF" />
    </module>
    <module name="MissingJavadocType">
      <property name="scope" value="protected" />
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF" />
      <property name="excludeScope" value="nothing" />
    </module>
  </module>
</module>